"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const coincap_1 = require("./api/coincap");
exports.connectCoinCap = coincap_1.connectCoinCap;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
var AssetCode;
(function (AssetCode) {
    AssetCode["Btc"] = "BTC";
    AssetCode["Eth"] = "ETH";
    AssetCode["Xrp"] = "XRP";
    AssetCode["Usd"] = "USD";
})(AssetCode || (AssetCode = {}));
const ethAsset = unit => amount => ({
    unit,
    exchangeUnit: 18,
    pluginBase: 9,
    symbol: AssetCode.Eth,
    amount: new bignumber_js_1.default(amount || 1)
});
const eth = ethAsset(18);
exports.eth = eth;
const gwei = ethAsset(9);
exports.gwei = gwei;
const wei = ethAsset(0);
exports.wei = wei;
const xrpAsset = unit => amount => ({
    unit,
    pluginBase: -3,
    exchangeUnit: 6,
    symbol: AssetCode.Xrp,
    amount: new bignumber_js_1.default(amount || 1)
});
const xrp = xrpAsset(6);
exports.xrp = xrp;
const drop = xrpAsset(0);
exports.drop = drop;
const xrpBase = xrpAsset(-3);
exports.xrpBase = xrpBase;
const btcAsset = unit => amount => ({
    unit,
    exchangeUnit: 8,
    pluginBase: 0,
    symbol: AssetCode.Btc,
    amount: new bignumber_js_1.default(amount || 1)
});
const btc = btcAsset(8);
exports.btc = btc;
const satoshi = btcAsset(0);
exports.satoshi = satoshi;
const usdAsset = unit => amount => ({
    unit,
    exchangeUnit: 2,
    pluginBase: 0,
    symbol: AssetCode.Usd,
    amount: new bignumber_js_1.default(amount || 1)
});
const usd = usdAsset(2);
exports.usd = usd;
const getRate = (source, dest, api) => {
    let rate = new bignumber_js_1.default(1);
    if (source.symbol !== dest.symbol) {
        if (!api) {
            throw new Error('API instance is required for non- like-kind conversions (e.g. BTC to ETH)');
        }
        const sourcePrice = api.getPrice(source.symbol);
        const destPrice = api.getPrice(dest.symbol);
        rate = sourcePrice.div(destPrice);
    }
    return rate.shiftedBy(source.unit - source.exchangeUnit - (dest.unit - dest.exchangeUnit));
};
const convert = (source, dest, apiOrRate) => {
    const isBigNumber = (o) => bignumber_js_1.default.isBigNumber(o);
    const rate = isBigNumber(apiOrRate)
        ? apiOrRate
        : getRate(source, dest, apiOrRate);
    return (source.amount
        .times(rate)
        .decimalPlaces(Math.max(dest.unit - dest.pluginBase, 0), bignumber_js_1.default.ROUND_DOWN));
};
exports.convert = convert;
//# sourceMappingURL=index.js.map